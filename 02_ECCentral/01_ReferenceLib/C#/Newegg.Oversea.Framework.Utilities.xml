<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Newegg.Oversea.Framework.Utilities</name>
    </assembly>
    <members>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringExtensions.MakeSafeSql(System.String)">
            <summary>
            
            </summary>
            <param name="inputSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringExtensions.IsEqual(System.String,System.String)">
            <summary>
            比较2个字符串对象是否相等,区分大小写。
            <remarks>2个字符串转换为小写字符进行比较</remarks>
            </summary>
            <param name="compareWith"></param>
            <returns>若相等，则为True；反之为False</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringExtensions.IsEqualIgnoreCase(System.String,System.String)">
            <summary>
            返回一个布尔值，指定两个字符串是否相等，不区分大小写。
            </summary>
            <param name="compareWith"></param>
            <returns>若相等，则为True；反之为False。</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringExtensions.UpperFirstChar(System.String)">
            <summary>
            将指定字符串的首字母转换为大写字符
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.EnumHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.GetEnumItems(System.Type)">
            <summary>
             获得枚举类型所包含的全部项的列表
            </summary>
            <param name="enumType">枚举的类型</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.GetEnumItemsWithAll(System.Type)">
            <summary>
            获得枚举类型所包含的全部项的列表，包含"All"。
            </summary>
            <param name="enumType">枚举对象类型</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.GetEnumItems(System.Type,System.Boolean)">
            <summary>
            获得枚举类型所包含的全部项的列表
            </summary>
            <param name="enumType">枚举对象类型</param>
            <param name="withAll">是否需要包含'All'</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.GetDescriptionByEnum``1(``0)">
            <summary>
            the the enum value's descrption attribute information
            </summary>
            <param name="enumType">the type of the enum</param>
            <param name="value">the enum value</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.GetValueByDescription``1(System.String)">
            <summary>
            get the enum value's int mode value
            </summary>
            <param name="enumType">the type of the enum</param>
            <param name="value">the enum value's descrption</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.GetEnumByDescription``1(System.String)">
            <summary>
            get the Enum value according to the its decription
            </summary>
            <param name="enumType">the type of the enum</param>
            <param name="value">the description of the EnumValue</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.GetEnumByName``1(System.String)">
            <summary>
            get the description attribute of a Enum value
            </summary>
            <param name="enumType">the type of the enum</param>
            <param name="value">enum value name</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.Parse``1(System.Char)">
            <summary>
            提供Value的字符,转换为对应的枚举对象
            <remarks>适用于枚举对象值定义为Char类型的</remarks>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.Parse``1(System.UInt64)">
            <summary>
            提供Value的字符,转换为对应的枚举对象
            <remarks>适用于枚举对象值定义为Int类型的</remarks>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.Parse``1(System.String)">
            <summary>
            提供Value的字符,转换为对应的枚举对象
            <remarks>适用于枚举对象值定义为Char类型的</remarks>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.TryParse``1(System.Char,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="c"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.TryParse``1(System.String,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.EnumHelper.TryParse``1(System.UInt64,``0@)">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.ObjectCollection.SortHelper">
            <summary>
            对IList对象中包含的Item,进行排序
            适用于Collection类型
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.SortHelper.Swap``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            根据指定集合的索引，交换指定索引中的Item的位置
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="i"></param>
            <param name="j"></param>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.SortHelper.Swap``1(``0@,``0@)">
            <summary>
            交换2个相同对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="lhs"></param>
            <param name="rhs"></param>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.SortHelper.QuickSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            快速排序(在集合中的对象需要继承于IComparable接口)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.SortHelper.QuickSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            快速排序(在集合中的对象需要继承于IComparable接口)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.SortHelper.InsertionSort``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})">
            <summary>
            插入排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="begin"></param>
            <param name="end"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.SortHelper.InsertionSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            插入排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.SortHelper.InsertionSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            插入排序
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.Culture.CultureTranslater">
            <summary>
            语言代码转换类
            语言代码，参考http://msdn.microsoft.com/zh-cn/library/system.globalization.cultureinfo.aspx
            </summary>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.Compress.CompressHelper">
            <summary>
            提供压缩相关的服务
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Compress.CompressHelper.CompressString(System.String)">
            <summary>
            压缩字符串
            
            </summary>
            <param name="unCompressedString"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Compress.CompressHelper.DecompressString(System.String)">
            <summary>
            解压字符串
            
            </summary>
            <param name="unCompressedString"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Compress.CompressHelper.CompressFiles(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            提供文件名称列表和压缩后保存的文件名称，对指定文件进行压缩
            </summary>
            <param name="fileName">需要压缩的文件列表</param>
            <param name="compressFileName">压缩后存放的文件名称</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Compress.CompressHelper.DecompressFiles(System.String,System.String)">
            <summary>
            将指定的压缩文件进行解压，并输出到指定路径中
            </summary>
            <param name="fileName">需要解压的文件全名</param>
            <param name="outputPath">解压后文件存放路径</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Compress.CompressHelper.CreateCompressFiles(System.IO.Stream,System.String)">
            <summary>
            将需要压缩的文件流进行压缩，然后保存到指定的文件下
            </summary>
            <param name="sourceStream"></param>
            <param name="compressFileName"></param>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Compress.CompressHelper.DeserializeFileInfo(System.IO.Stream,System.String)">
            <summary>
            反序列化文件描述对象
            </summary>
            <param name="sourceStream"></param>
            <param name="outputPath"></param>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.ObjectHelper">
            <summary>
            提供相同对象包含属性值得合并方法
            </summary>
        </member>
        <member name="F:Newegg.Oversea.Framework.Utilities.ObjectHelper.m_TypeList">
            <summary>
            保存对象类型
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectHelper.GetTypeInfo(System.Object)">
            <summary>
            获得合并对象类型，并暂时保存到Dictionary类型中
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectHelper.OverridePropertyValue``1(``0,``0)">
            <summary>
            使用input对象所有的属性值覆盖original对象所有的属性值
            </summary>
            <exception cref="T:System.ArgumentNullException">传入的original对象为null</exception>
            <exception cref="T:System.ArgumentNullException">传入的input对象为null</exception>
            <remarks>使用反射将Input对象的所有属性的值赋给Original对象</remarks>
            <typeparam name="T">T 传入的对象类型</typeparam>
            <param name="original">原始对象</param>
            <param name="input">需要合并的对象</param>
            <returns>合并后对象的实例</returns>
        </member>
        <member name="P:Newegg.Oversea.Framework.Utilities.Compress.CompressFileInfo.FileName">
            <summary>
            文件名称
            </summary>
        </member>
        <member name="P:Newegg.Oversea.Framework.Utilities.Compress.CompressFileInfo.FileBuffer">
            <summary>
            文件包含的Byte数组
            </summary>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.Encryption.EncryptTransform">
            <summary>
            提供加密解密方法
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptTransform.GetDecryptoServiceProvider(Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm)">
            <summary>
            根据提供的枚举信息,获得需要使用的解密算法的接口
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptTransform.GetEncryptoServiceProvider(Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm)">
            <summary>
            根据提供的枚举信息,获得需要使用的加密算法的接口
            </summary>
            <param name="algorithm">算法枚举</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptTransform.Decrypt(Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm,System.Byte[])">
            <summary>
            提供具体实现解密的方法
            </summary>
            <param name="algorithm"></param>
            <param name="bytesData">需要解密的信息</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptTransform.Encrypt(Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm,System.Byte[])">
            <summary>
            提供具体实现加密的方法
            </summary>
            <param name="algorithm"></param>
            <param name="bytesData">需要加密的信息</param>
            <returns></returns>
        </member>
        <member name="P:Newegg.Oversea.Framework.Utilities.Encryption.EncryptTransform.Key">
            <summary>
            获取或设置加密解密过程中使用的明文密码
            </summary>
        </member>
        <member name="P:Newegg.Oversea.Framework.Utilities.Encryption.EncryptTransform.InitVec">
            <summary>
            获取或设置加密解密过程中使用的初始化向量
            </summary>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper">
            <summary>
            提供加密解密方法
            </summary>
        </member>
        <member name="F:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.m_ShortDefaultKey">
            <summary>
            默认使用的适合于DES,RC2算法的Key
            </summary>
        </member>
        <member name="F:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.m_LongDefaultKey">
            <summary>
            默认使用的TRIPLEDES，RIJNDAEL算法的Key
            </summary>
        </member>
        <member name="F:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.m_ShortDefaultIV">
            <summary>
            默认使用的适合于DES,RC2,TRIPLEDES算法的InitVector
            </summary>
        </member>
        <member name="F:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.m_LongDefaultIV">
            <summary>
            默认使用的适合于RIJNDAEL算法的InitVector
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.Encrypt(System.String,Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm,System.String,System.String)">
            <summary>
            接受用户明文密码，本次加密使用的算法，完成对指定字符串的加密
            <example><![CDATA[string result = EncryptionHelper.Encrypt("1234", EncryptionAlgorithm.Rc2, "5678", text);]]></example>
            <remarks>各个算法对明文密码和初始化偏移量的要求不一样
            DES和RC2:明文密码长度和初始化偏移量长度 必须是4个字符;
            Rijndael:明文密码长度可以是12,16个字符,初始化偏移量为8个字符;
            TripleDes:明文密码长度可以为8个和12个字符,初始化偏移量为4个字符;
            注意:如果提供的明文密码和偏移量不符合算法的标准,将使用随机密码,使用者在加密后通过提供的Key和InitVector属性获得加密时使用的明文密码和偏移量
            </remarks>
            </summary>
            <param name="plainText">使用的加密明文密码</param>
            <param name="algorithm">加密算法枚举对象</param>
            <param name="userInitialVector">使用的加密起始偏移量</param>
            <param name="encryptionText">需要加密的字符</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.Encrypt(System.String)">
            <summary>
            指定需要加密的字符串使用默认的明文密码和算法(DES)进行加密
            </summary>
            <param name="encryptionText"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.Encrypt(Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm,System.String)">
            <summary>
            指定需要加密的字符串和算法使用默认的明文密码进行加密
            </summary>
            <param name="algorithm"></param>
            <param name="encryptionText"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.Encrypt(System.String,System.String,System.String)">
            <summary>
            接受用户明文密码，使用默认的加密算法完成对指定字符串的加密
            <remarks>默认为DES算法进行加密</remarks>
             <example><![CDATA[string result = EncryptionHelper.Encrypt("1234", "5678", text);]]></example>
            </summary>
            <param name="plainText">使用的加密明文密码</param>
            <param name="userInitialVector">使用的加密起始偏移量</param>
            <param name="encryptionText">需要加密的字符串</param>
            <returns>加密后的字符串</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.Decrypt(System.String,Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm,System.String,System.String)" -->
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.Decrypt(System.String,System.String,System.String)">
            <summary>
            接受用户明文密码，使用默认解密算法完成对指定字符串的解密
            </summary>
            <param name="plainText">加密时使用的明文密码</param>
            <param name="userInitialVector">加密时使用的起始偏移量</param>
            <param name="encryptionText">加密后的字符串</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.Decrypt(System.String)">
            <summary>
            使用默认的算法(DES)和默认的明文密码进行解密
            </summary>
            <param name="encryptionText"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.Decrypt(Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm,System.String)">
            <summary>
            指定加密时使用的算法,使用默认的明文密码进行解密
            </summary>
            <param name="algorithm"></param>
            <param name="encryptionText"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.GetDefaultKey(Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm)">
            <summary>
            根据算法获得默认的Key
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.GetDefaultIV(Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm)">
            <summary>
            根据算法获得默认的IV
            </summary>
            <param name="algorithm"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.SetInitialVector(Newegg.Oversea.Framework.Utilities.Encryption.EncryptionAlgorithm,System.String)">
            <summary>
            
            </summary>
            <param name="algorithm"></param>
            <param name="initialVector"></param>
            <returns></returns>
        </member>
        <member name="P:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.Key">
            <summary>
            使用的加密明文密码
            </summary>
        </member>
        <member name="P:Newegg.Oversea.Framework.Utilities.Encryption.EncryptionHelper.InitVector">
            <summary>
            使用加密的起始偏移量
            </summary>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.String.RegularHelper">
            <summary>
            正则表达式相关方法集合
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            根据传入的字符串和提供的正则表达式进行验证
            </summary>
            <param name="input">需要进行验证的字符串</param>
            <param name="pattem">验证时使用的正则表达式</param>
            <param name="options">正则表达式选项</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsMatch(System.String,System.String)">
            <summary>
            根据传入的字符串和提供的正则表达式进行验证
            </summary>
            <param name="input">需要进行验证的字符串</param>
            <param name="pattem">验证时使用的正则表达式</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsNumber(System.String)">
            <summary>
            检查输入的字符串是否是整数，默认7位数
            </summary>
            <param name="input">输入的字符串</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsNumber(System.String,System.Int32)">
            <summary>
            指定数字长度，进行整数验证
            <remarks>如果digit为空或者digit小于等于0，将自动默认使用7位数字验证</remarks>
            </summary>
            <param name="input">输入的字符串</param>
            <param name="digit">整数最大位数</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsDecimal(System.String)">
            <summary>
            检查输入的字符串是否包含小数格式，默认7位整数，2位小数
            </summary>
            <param name="input">输入的字符串</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsDecimal(System.String,System.Int32)">
            <summary>
            指定小数位数，对输入字符串进行验证
            <remarks>此时整数部分，默认使用最大7位，小数根据使用者指定产生。如果指定的小数位数小于等于0，那么将采用默认的2位格式验证</remarks>
            </summary>
            <param name="input">输入的字符串</param>
            <param name="decimalDigit">小数最大位数</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsDecimal(System.String,System.Int32,System.Int32)">
            <summary>
            指定整数位数和小数位数,进行数字验证
            <remarks>如果指定的整数位数小于0，那么将使用默认的7位整数格式
                     如果指定的小数位数小于0，那么将使用默认的2位小数格式</remarks>
            </summary>
            <param name="input">输入的字符串</param>
            <param name="intDigit">整数位数</param>
            <param name="decimalDigit">小数位数</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsEmailAddress(System.String)">
            <summary>
            验证输入字符串是否EMail地址
            </summary>
            <param name="input">输入的字符串</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsCheck(System.String)">
            <summary>
            验证输入字符串是否是26个字母+数字+下划线
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsURL(System.String)">
            <summary>
            验证输入字符串是否是URL
            </summary>
            <param name="input">输入的字符串</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.RegularHelper.IsGuid(System.String)">
            <summary>
            验证输入字符串是否是GUID值
            </summary>
            <param name="input">输入的字符串</param>
            <returns>匹配通过返回true，否则返回false</returns>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper">
            <summary>
            提供对IList类型实例进行比较的方法集合
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.FindDelete``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.MatchDelegate{``0})">
            <summary>
            根据提供的比较方法委托实例，查找变动后的IList对象被删除的Item
            <remarks>1.当接收原始集合不为null，变动后的集合为null时，将直接返回原始的集合;
            2.当原始集合为null，那么直接返回null
            </remarks>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalList">原始IList对象</param>
            <param name="newList">变动后IList对象</param>
            <param name="matchCondition">对象比较方法的委托实例</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.FindAdd``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.MatchDelegate{``0})">
            <summary>
            根据提供的比较方法委托实例，查找变动后的IList对象中新增的Item
            <remarks>1.当接收原始集合为null，变动后的集合不为null时，将直接返回变动的集合;
            2.当变动的集合为null，那么直接返回null
            </remarks>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalList">原始IList对象</param>
            <param name="newList">变动后IList对象</param>
            <param name="matchCondition">对象比较方法的委托实例</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.FindChange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.MatchDelegate{``0})">
            <summary>
            根据提供的比较方法委托实例，查找变动后的IList对象有信息变动的Item
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalList">原始IList对象</param>
            <param name="newList">变动后IList对象</param>
            <param name="matchCondition">对象比较方法的委托实例</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.Find``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            从指定的对象集合中，查找提供的Item是否存在
            </summary>
            <example><![CDATA[Predicate<DepartmentModel> m = new Predicate<DepartmentModel>(delegate(DepartmentModel originalItem)
            {return originalItem.Number == t.Number;});
            DepartmentModel result = ListHelper.Find<DepartmentModel>(originalList, m);]]></example>
            <typeparam name="T"></typeparam>
            <param name="originalList"></param>
            <param name="match"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.RemoveDuplicateItem``1(System.Collections.Generic.IList{``0},Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.MatchDelegate{``0},System.Collections.Generic.IComparer{``0})" -->
        <!-- Badly formed XML comment ignored for member "M:Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.RemoveDuplicateItem``1(System.Collections.Generic.IList{``0},Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.MatchDelegate{``0})" -->
        <member name="T:Newegg.Oversea.Framework.Utilities.ObjectCollection.ListHelper.MatchDelegate`1">
            <summary>
            对象比较方法的委托
            </summary>
            <typeparam name="T"></typeparam>
            <param name="originalItem">原始IList对象中包含的Item</param>
            <param name="newItem">变动后IList对象中包含的Item</param>
            <returns></returns>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.IO.StreamHelper">
            <summary>
            Utility for help operation Stream.
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.IO.StreamHelper.CreateMemoryStreamFromBytes(System.Byte[])">
            <summary>
            Create a memory stream from input byte array.
            </summary>
            <param name="inputData">Input data based on byte array.</param>
            <returns>A memory stream created from input data. If input data is null or empty, return null.</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.IO.StreamHelper.ReadBytesFromFile(System.String)">
            <summary>
            Read the data based on byte array from a specific file which path is from input.
            </summary>
            <param name="localFilePath">File path you want read.</param>
            <returns>The file data based on byte array of input file. If input file path not exists, return null.</returns>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.String.StringHelper">
            <summary>
            提供字符串相关想法集合
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringHelper.MakeSafeSql(System.String)">
            <summary>
            
            </summary>
            <param name="inputSQL"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringHelper.IsNullOrEmpty(System.String)">
            <summary>
            由于系统提供比较字符串只有一个空格时，会认为比较的字符串不为空。
            该方法是对系统方法的一个补充，即传入字符串有且只有一个空格时，验证字符串为空；
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringHelper.AreEqual(System.String,System.String)">
            <summary>
            比较2个字符串对象是否相等,区分大小写。
            <remarks>2个字符串转换为小写字符进行比较</remarks>
            </summary>
            <param name="input1"></param>
            <param name="input2"></param>
            <returns>若相等，则为True；反之为False</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringHelper.AreEqualIgnoreCase(System.String,System.String)">
            <summary>
            返回一个布尔值，指定两个字符串是否相等，不区分大小写。
            </summary>
            <param name="strA"></param>
            <param name="strB"></param>
            <returns>若相等，则为True；反之为False。</returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringHelper.UpperFirstChar(System.String)">
            <summary>
            将指定字符串的首字母转换为大写字符
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.String.StringHelper.TrimString(System.String)">
            <summary>
            去掉字符串的前后空格。当字符串为null时，返回null
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="T:Newegg.Oversea.Framework.Utilities.SerializeHelper">
            <summary>
            对象序列化相关方法
            </summary>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.LoadFromXml``1(System.String)">
            <summary>
            指定Xml文件名，根据注入的类型反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName">文件名称（包含路径和文件名）</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.LoadFromStream``1(System.IO.Stream)">
            <summary>
            指定 Stream，根据注入的类型反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="stream">Stream</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.LoadFromResource``1(System.String)">
            <summary>
            指定调用程序集的资源文件 ，根据注入的类型反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resourceName">调用程序集的资源文件名</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.LoadFromCallingResource``1(System.String)">
            <summary>
            指定调用类的资源文件 ，根据注入的类型反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="resourceName">调用程序类的资源文件名</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.SaveToXml``1(System.String,``0)">
            <summary>
            将对象序列化后，保存到指定的文件中；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <param name="data"></param>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.LoadContractFromXml``1(System.String)">
            <summary>
            指定Xml文件名，根据注入的WCF Contract类型反序列化成对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName">文件名称（包含路径和文件名）</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.SaveContractToXml``1(System.String,``0)">
            <summary>
            将WCF Contract对象序列化后，保存到指定的文件中；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="fileName"></param>
            <param name="data"></param>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.XmlSerializer``1(``0)">
            <summary>
            将对象序列化为Xml格式的字符串
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serialObject"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.XmlSerializer(System.Object)">
            <summary>
            接受对象，并通过Xml格式序列化对象
            </summary>
            <param name="serialObject"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.XmlDeserialize``1(System.String)">
            <summary>
            指定反序列化类型，通过Xml序列化后的字符串反序列为对象实例；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.DeepClone``1(``0)">
            <summary>
            利用Xml格式序列化完成对象的深度拷贝；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="sourceObject"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.BinarySerializer``1(``0,System.Text.Encoding)">
            <summary>
            通过二进制格式完成序列化对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serialObject"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.BinarySerializer``1(``0)">
            <summary>
            通过二进制格式完成序列化对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="serialObject"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.BinarySerializer(System.Object,System.Text.Encoding)">
            <summary>
            通过二进制格式完成序列化对象。
            </summary>
            <param name="serialObject"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.BinarySerializer(System.Object)">
            <summary>
            通过二进制格式完成序列化对象。
            </summary>
            <param name="serialObject"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.BinaryDeserialize``1(System.String,System.Text.Encoding)">
            <summary>
            将二进制格式序列化后的字符串，反序列化为对象；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <param name="encoding"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.BinaryDeserialize``1(System.String)">
            <summary>
            将二进制格式序列化后的字符串，反序列化为对象；
            </summary>
            <typeparam name="T"></typeparam>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.DataContractDeserializer``1(System.String)">
            <summary>
            反序列化DataContract消息对象
            </summary>
            <typeparam name="T">消息对象类型</typeparam>
            <param name="xmlData">序列化时产生的xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.DataContractSerializer``1(``0)">
            <summary>
            序列化DataContract消息对象
            </summary>
            <typeparam name="T">消息对象类型</typeparam>
            <param name="myObject">消息对象实例</param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.JsonSerializer(System.Object)">
            <summary>
            将对象序列化为Json格式
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Newegg.Oversea.Framework.Utilities.SerializeHelper.JsonDeserialize``1(System.String)">
            <summary>
            将Json反序列化为对象
            </summary>
            <typeparam name="T"></typeparam>
            <param name="json"></param>
            <returns></returns>
        </member>
    </members>
</doc>
