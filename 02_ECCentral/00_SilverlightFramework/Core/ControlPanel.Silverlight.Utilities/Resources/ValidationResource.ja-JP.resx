<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="String" xml:space="preserve">
    <value>例えば、770-123-1234</value>
  </data>
  <data name="ValidationMessage_BadWords" xml:space="preserve">
    <value>あなたの入力は、いくつかの悪い単語（複数可）を持っています。（{0}）</value>
  </data>
  <data name="ValidationMessage_Email" xml:space="preserve">
    <value>電子メール形式は正しくキーではありません。電子メール形式の必見abc@domain.comのように見える</value>
  </data>
  <data name="ValidationMessage_HtmlAttribute" xml:space="preserve">
    <value>あなたの入力は、いくつかのHTML属性（複数可）を持っています。</value>
  </data>
  <data name="ValidationMessage_Integer" xml:space="preserve">
    <value>このフィールドに有効な整数を入力してください。</value>
  </data>
  <data name="ValidationMessage_InvalidDate" xml:space="preserve">
    <value>日付のみでの{0} - {1}。</value>
  </data>
  <data name="ValidationMessage_IP" xml:space="preserve">
    <value>有効なIPアドレスを入力してください。</value>
  </data>
  <data name="ValidationMessage_LengthRange" xml:space="preserve">
    <value>{0}と{1}、現在の長さがあるの間の値の長さを入力してください{2}。</value>
  </data>
  <data name="ValidationMessage_MaxLength" xml:space="preserve">
    <value>最大の長さは{0}、現在の長さは{1}です。</value>
  </data>
  <data name="ValidationMessage_Number" xml:space="preserve">
    <value>このフィールドに有効な数値を入力してください。</value>
  </data>
  <data name="ValidationMessage_Phone" xml:space="preserve">
    <value>有効な電話番号を入力してください。</value>
  </data>
  <data name="ValidationMessage_Regex" xml:space="preserve">
    <value>または770-123-1234</value>
  </data>
  <data name="ValidationMessage_Required" xml:space="preserve">
    <value>-1234</value>
  </data>
  <data name="ValidationMessage_URL" xml:space="preserve">
    <value>無効な値。</value>
  </data>
  <data name="ValidationMessage_ZIP" xml:space="preserve">
    <value>必須フィールド。</value>
  </data>
  <data name="ValidationPattern_Email" xml:space="preserve">
    <value>^[\w.-]{1,}[@][\w\-]{1,}([.]([\w\-]{1,})){1,3}$</value>
  </data>
  <data name="ValidationPattern_Integer" xml:space="preserve">
    <value>^[-]?[\d]+$</value>
  </data>
  <data name="ValidationPattern_IP" xml:space="preserve">
    <value>(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$</value>
  </data>
  <data name="ValidationPattern_Number" xml:space="preserve">
    <value>^((-?\+?([1-9]\d*|[1-9]\d*\.\d+|0\.\d+))|\.\d+)$</value>
  </data>
  <data name="ValidationPattern_Phone" xml:space="preserve">
    <value>^\d{3}-\d{3}-\d{4}(\(\d{3,4}\))?$</value>
  </data>
  <data name="ValidationPattern_URL" xml:space="preserve">
    <value>^[a-zA-z]+://[^\s]*$</value>
  </data>
  <data name="ValidationPattern_ZIP" xml:space="preserve">
    <value>^\d{5}(-\d{1,4})?$</value>
  </data>
</root>