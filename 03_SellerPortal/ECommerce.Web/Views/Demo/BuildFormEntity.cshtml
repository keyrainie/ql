@section headers
{
    @Styles.Render("~/Content/plugin/bootstrapValidator/css")
}
<section>
    <div class="col-lg-8 col-lg-offset-2">
        <div class="page-header">
            <h2>Sign up</h2>
        </div>

        <form id="defaultForm" method="post" class="form-horizontal bv-form" action="target.php" novalidate="novalidate">
            <div class="form-group has-feedback has-error">
                <label class="col-lg-3 control-label">Full name</label>
                <div class="col-lg-4">
                    <input data-model="Abc.Edf.FirstName" type="text" class="form-control" name="firstName" placeholder="First name" data-bv-field="firstName"><i class="form-control-feedback glyphicon glyphicon-remove" data-bv-icon-for="firstName" style=""></i>
                    <small class="help-block" data-bv-validator="notEmpty" data-bv-for="firstName" data-bv-result="INVALID" style="">The first name is required and cannot be empty</small>
                </div>
                <div class="col-lg-4">
                    <input data-model="LastName" type="text" class="form-control" name="lastName" placeholder="Last name" data-bv-field="lastName"><i class="form-control-feedback glyphicon glyphicon-remove" data-bv-icon-for="lastName" style=""></i>
                    <small class="help-block" data-bv-validator="notEmpty" data-bv-for="lastName" data-bv-result="INVALID" style="">The last name is required and cannot be empty</small>
                </div>
            </div>

            <div class="form-group has-feedback has-error">
                <label class="col-lg-3 control-label">Username</label>
                <div class="col-lg-5">
                    <input data-model="UserName" type="text" class="form-control" name="username" data-bv-field="username"><i class="form-control-feedback glyphicon glyphicon-remove" data-bv-icon-for="username" style=""></i>
                    <small class="help-block" data-bv-validator="notEmpty" data-bv-for="username" data-bv-result="INVALID" style="">The username is required and cannot be empty</small><small class="help-block" data-bv-validator="stringLength" data-bv-for="username" data-bv-result="VALID" style="display: none;">The username must be more than 6 and less than 30 characters long</small><small class="help-block" data-bv-validator="regexp" data-bv-for="username" data-bv-result="VALID" style="display: none;">The username can only consist of alphabetical, number, dot and underscore</small><small class="help-block" data-bv-validator="remote" data-bv-for="username" data-bv-result="VALID" style="display: none;">The username is not available</small><small class="help-block" data-bv-validator="different" data-bv-for="username" data-bv-result="VALID" style="display: none;">The username and password cannot be the same as each other</small>
                </div>
            </div>

            <div class="form-group has-feedback has-success">
                <label class="col-lg-3 control-label">Email address</label>
                <div class="col-lg-5">
                    <input data-model="Email" type="text" class="form-control" name="email" data-bv-field="email"><i class="form-control-feedback glyphicon glyphicon-ok" data-bv-icon-for="email" style=""></i>
                    <small class="help-block" data-bv-validator="emailAddress" data-bv-for="email" data-bv-result="VALID" style="display: none;">The input is not a valid email address</small>
                </div>
            </div>

            <div class="form-group has-feedback has-error">
                <label class="col-lg-3 control-label">Password</label>
                <div class="col-lg-5">
                    <input data-model="Password" type="password" class="form-control" name="password" data-bv-field="password"><i class="form-control-feedback glyphicon glyphicon-remove" data-bv-icon-for="password" style=""></i>
                    <small class="help-block" data-bv-validator="notEmpty" data-bv-for="password" data-bv-result="INVALID" style="">The password is required and cannot be empty</small><small class="help-block" data-bv-validator="identical" data-bv-for="password" data-bv-result="VALID" style="display: none;">The password and its confirm are not the same</small><small class="help-block" data-bv-validator="different" data-bv-for="password" data-bv-result="VALID" style="display: none;">The password cannot be the same as username</small>
                </div>
            </div>

            <div class="form-group has-feedback has-error">
                <label class="col-lg-3 control-label">Retype password</label>
                <div class="col-lg-5">
                    <input data-model="ConfirmPassword" type="password" class="form-control" name="confirmPassword" data-bv-field="confirmPassword"><i class="form-control-feedback glyphicon glyphicon-remove" data-bv-icon-for="confirmPassword" style=""></i>
                    <small class="help-block" data-bv-validator="notEmpty" data-bv-for="confirmPassword" data-bv-result="INVALID" style="">The confirm password is required and cannot be empty</small><small class="help-block" data-bv-validator="identical" data-bv-for="confirmPassword" data-bv-result="VALID" style="display: none;">The password and its confirm are not the same</small><small class="help-block" data-bv-validator="different" data-bv-for="confirmPassword" data-bv-result="VALID" style="display: none;">The password cannot be the same as username</small>
                </div>
            </div>
            <div class="form-group has-feedback has-success">
                <label class="col-lg-3 control-label">Birthday</label>
                <div class="col-lg-5">
                    <input data-model="Abc.Birthday" type="text" class="form-control" name="birthday" data-bv-field="birthday"><i class="form-control-feedback glyphicon glyphicon-ok" data-bv-icon-for="birthday" style=""></i>
                    (YYYY/MM/DD)
                           
                    <small class="help-block" data-bv-validator="date" data-bv-for="birthday" data-bv-result="VALID" style="display: none;">The birthday is not valid</small>
                </div>
            </div>
            <div class="form-group has-feedback has-error">
                <label class="col-lg-3 control-label" id="captchaOperation">85 + 172 =</label>
                <div class="col-lg-2">
                    <input type="text" class="form-control" name="captcha" data-bv-field="captcha"><i class="form-control-feedback glyphicon glyphicon-remove" data-bv-icon-for="captcha" style=""></i>
                    <small class="help-block" data-bv-validator="callback" data-bv-for="captcha" data-bv-result="INVALID" style="">Wrong answer</small>
                </div>
            </div>

            <div class="form-group">
                <div class="col-lg-9 col-lg-offset-3">
                    <button type="button" class="btn btn-info" id="btnBuildEntity">Build Entity</button>
                </div>
            </div>
            
            <div class="form-group" id="divMessage">null</div>
            
            <div class="form-group">
                <h6>使用说明</h6>
                <p>1.说有的输入控件需要设置data-model,如:data-model="Name" , data-model="User.Name"</p>
                <p>2.调用方法 $.buildEntity({JqueryObject}),如 var data = $.buildEntity($("#defaultForm"));</p>
                <p>3.Ajax,如:$.post(url,{data:JSON.stringify(data)}),后台获取Request.Form["Data"] 然后进行反序列化</p>
                <p>4.不支持数组的build</p>
            </div>
        </form>
    </div>
</section>
@section scripts
{
    @Scripts.Render("~/Content/plugin/bootstrapValidator/js")
    <script type="text/javascript">
        $(document).ready(function () {
            // Generate a simple captcha
            function randomNumber(min, max) {
                return Math.floor(Math.random() * (max - min + 1) + min);
            };
            $('#captchaOperation').html([randomNumber(1, 100), '+', randomNumber(1, 200), '='].join(' '));

            $('#defaultForm').bootstrapValidator({
                //        live: 'disabled',
                message: 'This value is not valid',
                feedbackIcons: {
                    valid: 'glyphicon glyphicon-ok',
                    invalid: 'glyphicon glyphicon-remove',
                    validating: 'glyphicon glyphicon-refresh'
                },
                fields: {
                    firstName: {
                        validators: {
                            notEmpty: {
                                message: 'The first name is required and cannot be empty'
                            }
                        }
                    },
                    lastName: {
                        validators: {
                            notEmpty: {
                                message: 'The last name is required and cannot be empty'
                            }
                        }
                    },
                    username: {
                        message: 'The username is not valid',
                        validators: {
                            notEmpty: {
                                message: 'The username is required and cannot be empty'
                            },
                            stringLength: {
                                min: 6,
                                max: 30,
                                message: 'The username must be more than 6 and less than 30 characters long'
                            },
                            regexp: {
                                regexp: /^[a-zA-Z0-9_\.]+$/,
                                message: 'The username can only consist of alphabetical, number, dot and underscore'
                            },
                            remote: {
                                url: 'remote.php',
                                message: 'The username is not available'
                            },
                            different: {
                                field: 'password',
                                message: 'The username and password cannot be the same as each other'
                            }
                        }
                    },
                    email: {
                        validators: {
                            emailAddress: {
                                message: 'The input is not a valid email address'
                            }
                        }
                    },
                    password: {
                        validators: {
                            notEmpty: {
                                message: 'The password is required and cannot be empty'
                            },
                            identical: {
                                field: 'confirmPassword',
                                message: 'The password and its confirm are not the same'
                            },
                            different: {
                                field: 'username',
                                message: 'The password cannot be the same as username'
                            }
                        }
                    },
                    confirmPassword: {
                        validators: {
                            notEmpty: {
                                message: 'The confirm password is required and cannot be empty'
                            },
                            identical: {
                                field: 'password',
                                message: 'The password and its confirm are not the same'
                            },
                            different: {
                                field: 'username',
                                message: 'The password cannot be the same as username'
                            }
                        }
                    },
                    birthday: {
                        validators: {
                            date: {
                                format: 'YYYY/MM/DD',
                                message: 'The birthday is not valid'
                            }
                        }
                    },
                    captcha: {
                        validators: {
                            callback: {
                                message: 'Wrong answer',
                                callback: function (value, validator) {
                                    var items = $('#captchaOperation').html().split(' '), sum = parseInt(items[0]) + parseInt(items[2]);
                                    return value == sum;
                                }
                            }
                        }
                    }
                }
            });

            // Validate the form manually
            $('#btnBuildEntity').click(function () {
                //$('#defaultForm').bootstrapValidator('validate');
                var data = $.buildEntity($("#defaultForm"));
                $("#divMessage").html(JSON.stringify(data));
            });

            $('#resetBtn').click(function () {
                $('#defaultForm').data('bootstrapValidator').resetForm(true);
            });
        });
</script>
}
